<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>构建个人博客问题汇总</title>
      <link href="/2020/07/21/hexo/"/>
      <url>/2020/07/21/hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">hexo史上最全搭建教程</a></p><h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><h3 id="node、npm版本问题"><a href="#node、npm版本问题" class="headerlink" title="node、npm版本问题"></a>node、npm版本问题</h3><ul><li>更新到最新版本</li><li>切换到淘宝源，使用cnpm，npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></li></ul><h3 id="github访问速度慢"><a href="#github访问速度慢" class="headerlink" title="github访问速度慢"></a>github访问速度慢</h3><pre><code>获取Github相关网站的ip访问https://www.ipaddress.com，分别输入github.global.ssl.fastly.net和github.com，查询ip地址在本地host中增加以下配置140.82.113.4    github.com199.232.69.194    github.global.ssl.fastly.net</code></pre><h3 id="GitHub-page-404"><a href="#GitHub-page-404" class="headerlink" title="GitHub page 404"></a>GitHub page 404</h3><p>创建一个【github用户名】.github.io的仓库，只有这样部署到GitHub page的时候，访问xxxx.github.io才会失败，不会出现404</p><h3 id="gitalk无法获取评论"><a href="#gitalk无法获取评论" class="headerlink" title="gitalk无法获取评论"></a>gitalk无法获取评论</h3><p>需要登录github账户进行初始化</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket中connection Reset问题分析</title>
      <link href="/2020/07/21/java/io/socket-q1/"/>
      <url>/2020/07/21/java/io/socket-q1/</url>
      
        <content type="html"><![CDATA[<h2 id="现象描述"><a href="#现象描述" class="headerlink" title="现象描述"></a>现象描述</h2><p>先后启动服务端和客户端，客户端正常执行完毕，服务端出现Connection Reset异常，错误定位在<strong>while ((bufferSize = is.read(bytes))!=-1)</strong></p><h2 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h2><pre><code>import java.io.*;import java.net.ServerSocket;import java.net.Socket;public class Server {    public static void main(String[] args) throws IOException {        ServerSocket server = new ServerSocket(55335);        File dir = new File(&quot;received&quot;);        if (!dir.exists()){            dir.mkdir();        }        while (true){            Socket socket = server.accept();            new Thread(()-&gt;{                try {                    String name = null;                    InputStream is = socket.getInputStream();                    BufferedReader reader = new BufferedReader(new InputStreamReader(is));                    if ((name = reader.readLine())==null){                        System.out.println(&quot;出现异常！无法完成此次传输...&quot;);                        return;                    }                    System.out.println(&quot;文件名为：&quot;+name);                    System.out.println(&quot;开始接收...&quot;);                    File file = new File(dir,name);                    FileOutputStream fos = new FileOutputStream(file);                    int size = 0;                    int bufferSize;                    byte[] bytes = new byte[1024];                    while ((bufferSize = is.read(bytes))!=-1){                        System.out.println(bufferSize);                        fos.write(bytes,0,bufferSize);                        System.out.println(&quot;已写入&quot;+(size+=bufferSize)+&quot;B数据&quot;);                    }                    fos.flush();                    System.out.println(bufferSize);                    fos.close();                    System.out.println(&quot;写入完成！路径为：&quot;+file.getAbsolutePath());                } catch (IOException e) {                    e.printStackTrace();                }            }).start();            OutputStream os = socket.getOutputStream();            os.write(&quot;hello\t&quot;.getBytes());        }    }}</code></pre><p>服务端代码逻辑如下：</p><ul><li>循环等待建立连接</li><li>通过字符流接收客户端发送过来的数据，作为新文件的文件名</li><li>通过字节流接收客户端发送过来的数据，并写入指定文件</li></ul><h2 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h2><pre><code>import java.io.*;import java.net.Socket;import java.nio.charset.StandardCharsets;import java.util.Arrays;import java.util.Scanner;public class Client {    public static void main(String[] args) throws IOException, InterruptedException {        Scanner sc = new Scanner(System.in);        byte[] bytes = new byte[1024];        String path;        File file;        System.out.println(&quot;输入文件路径：&quot;);        path = sc.nextLine();        file = new File(path);        System.out.println(&quot;路径为：&quot;+file.getAbsolutePath());        System.out.println(&quot;文件大小：&quot;+file.length()+&quot;B&quot;);        if (!file.exists()){            System.out.println(&quot;文件不存在！&quot;);            return;        }        int size = 0;        int bufferSize = 0;        Socket socket = new Socket(&quot;localhost&quot;,55335);        OutputStream os = socket.getOutputStream();        os.write((file.getName()+&quot;\n&quot;).getBytes());        os.flush();        FileInputStream fis = new FileInputStream(file);        while ((bufferSize=fis.read(bytes))!=-1){            size+=bufferSize;            os.write(bytes);            System.out.println(&quot;已传输&quot;+size+&quot;B&quot;);        }        os.flush();        System.out.println(&quot;传输完成&quot;);        Thread.sleep(1000);    }}</code></pre><p>客户端代码逻辑如下：</p><ul><li>建立socket连接</li><li>先通过字符流把文件名发送到服务端</li><li>然后通过字节流把文件内容发送到服务端</li></ul><h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><ul><li>服务端在<strong>while ((bufferSize = is.read(bytes))!=-1)</strong> 时Connection Reset，即客户端数据还未读取完毕，客户端已退出</li><li>核对客户端代码，发现发送完数据，沉睡了一秒后结束运行。正常来说，测试文件比较小，应该可以正常接收完毕。但是<strong>客户端最后并未执行socket.shutdownOutput()，通知服务端数据已发送完毕，导致服务端一直处理读取数据状态，但由于数据一直未就绪导致服务端IO堵塞</strong>。这时，客户端退出，服务端就异常了</li><li>发现上述问题，我们在客户端加上socket.shutdownOutput()，服务端正常执行完毕，验证上述结论</li><li>出现新的问题，服务端未接收到后续发送到的数据，本地只写入了一个空文件</li><li>debug模式开启，在客户端<strong>while ((bufferSize=fis.read(bytes))!=-1)</strong> 加上断点，服务端竟然可以接收到数据。感觉有点奇怪，随后又在客户端第一次输出流os.flush()后沉睡一秒，去除断点也可以正常执行并接收到数据。看来和发送接收的时间点有关系，纠结中…</li><li>客户端中有两次发送数据，第一次可以接收，第二次不行。两次中间增加执行间隔，又都可以。可以得出，肯定是前一次发送对第二次造成了影响。随后，把第一次发送文件名的代码注释掉，同时注释掉服务端接收的代码，文件数据接收正常</li><li>观察两次写入的不同，第一次内容加上了换行符。然后再看服务端代码，第一次使用的缓存字符流，读完文件内容时使用的却是字节流，交替使用了缓冲字符流和字节流</li><li>这样就可以解释上述现象了，缓冲字符流读取数据时有缓存，直接转向InputStream去读取，缓存中的数据是读不到的。因为测试发送的数据量比较小，都进入了缓冲区，转换成字节流后就造成读取不到任何数据的情况。加断点或者沉睡，延缓了第二次数据发送，服务端在切换成字节流后才接收到数据，所以又可以正常接收</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>使用字节流或者字符流，不要交替使用</p><ul><li>字节流：先发送文件名占用字节数(int类型)，再发送文件名，最后发送文件内容。服务端先读取4个字节转化为int，并作为第二次读取的字节数读取文件名，最后按指定步长读取文件内容</li><li>字符流：逐行读取文件并发送，服务端统一为字符流读取</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
